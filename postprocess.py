"""
A module for undoing the preprocessing of images and saving them as image files
"""
import os
import tensorflow as tf
import numpy as np
import pandas as pd
import h5py
from tqdm import tqdm
from skimage.util import img_as_ubyte
from utils import set_up_environment, maximum_center_crop, prewhiten, l2_normalize, read_sampled_identities

from PIL import Image

from absl import app, flags

#VGG_BASE = '/projects/leelab3/image_datasets/vgg_face/'
VGG_BASE = '/data/vggface'

FLAGS = flags.FLAGS
flags.DEFINE_string('image_directory',
                    os.path.join(VGG_BASE, 'test_preprocessed_sampled'),
                    'Top level directory for images')
flags.DEFINE_string('output_directory',
                    os.path.join(VGG_BASE, 'test_perturbed_sampled'),
                    'Top level directory to output adversarially-modified images')
flags.DEFINE_string('sampled_identities',
                    'sampled_identities.txt',
                    'txt file generated by sample_identities.py to preprocess')
flags.DEFINE_string('format',
                   'jpeg',
                    'The format to save the images to')
flags.DEFINE_float('epsilon',
                   0.04,
                   'Maximum perturbation distance for adversarial attacks.')
flags.DEFINE_integer('resize_dimension',
                     160,
                     'Dimension to resize all images to')
flags.DEFINE_string('attack_type',
                    'community_naive_random',
                    'One of `self_distance`, `target_image`')

def _get_identity_mean_std(identity):
    """
    Helper function to read h5 dataset files.
    """
    image_file = os.path.join(FLAGS.image_directory,
                              identity,
                              'images.h5')
    with h5py.File(image_file, 'r') as f:
        x = f['images'][:]

    axis = (1, 2, 3)
    size = x[0].size

    mean = np.mean(x, axis=axis, keepdims=True)
    std = np.std(x, axis=axis, keepdims=True)
    std_adj = np.maximum(std, 1.0/np.sqrt(size))
    return mean, std_adj

def write_as_image_files():
    """
    Runs the embedding model over the pre-processed dataset and saves the embeddings into h5py datasets.
    """
    if FLAGS.sampled_identities != "":
        sampled = read_sampled_identities(FLAGS.sampled_identities)

    identities = os.listdir(FLAGS.image_directory)
    for identity in tqdm(identities):
        # bypass identities not in sample, if a sampled file is provided
        if FLAGS.sampled_identities != "" and not (identity in sampled):
            continue
        id_mean, id_std = _get_identity_mean_std(identity)
        for target_identity in tqdm(list(set(identities) - set([identity]))):
            data_directory = os.path.join(
                     FLAGS.output_directory,
                     identity,
                     FLAGS.attack_type,
                     target_identity)
            if FLAGS.epsilon != 0.0:
                data_path = os.path.join(data_directory, 'epsilon_{}.h5'.format(FLAGS.epsilon))

                with h5py.File(data_path, 'r') as dataset_file:
                    target_images = dataset_file["images"][:]
                target_images  *= id_std
                target_images += id_mean
                target_images = np.clip(target_images, 0.0, 255.0)
                target_images = np.uint8(target_images)
            else:
                data_path= os.path.join(
                     FLAGS.image_directory,
                     identity,
                     "images.h5"
                )
                with h5py.File(data_path, 'r') as dataset_file:
                    target_images = dataset_file["images"][:]

                target_images = np.uint8(target_images)
            denorm_path = os.path.join(data_directory, 'epsilon_{}'.format(FLAGS.epsilon), FLAGS.format)
            os.makedirs(denorm_path, exist_ok=True)
            for imindx, im in enumerate(target_images):
                Image.fromarray(im, mode="RGB").save(
                        os.path.join(denorm_path, str(imindx) + "." + FLAGS.format))

def main(argv=None):
    assert not (FLAGS.format.startswith(".")), "Specify format without a leading dot `.` character"
    write_as_image_files()

if __name__ == '__main__':
    app.run(main)
